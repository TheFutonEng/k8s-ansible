---

- name: Ensure SELinux is disabled
  selinux:
    state: disabled

- name: Disable swap
  command: swapoff --all

- name: Remove swap volumes from /etc/fstab
  lineinfile:
    path: /etc/fstab
    state: absent
    # This should match all lines with an fstype of "swap"
    regexp: '^[^\s]+\s+[^\s]+\s+swap\s+'

- name: Add yum repository for Kubernetes
  yum_repository:
    name: kubernetes
    description: Kubernetes repo
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    gpgcheck: yes
    repo_gpgcheck: yes
    gpgkey: >
      https://packages.cloud.google.com/yum/doc/yum-key.gpg
      https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: Install Kubernetes
  yum:
    update_cache: yes
    name: "{{ item }}"
    state: latest
  with_items:
    - kubelet
    - kubeadm
    - kubectl

- name: Ensure kubelet is started
  service:
    name: kubelet
    state: started
    enabled: yes

- name: Enable EPEL
  yum:
    name: epel-release
    state: latest
  when: not epel_preinstalled

- name: Install jq
  yum:
    name: jq
    state: latest
  when: inventory_hostname in groups['kube_masters']

# Set the token TTL so that the token doesn't expire
- name: Initialise Kubernetes master
  command: kubeadm init --apiserver-advertise-address={{ kube_master_ip }} --token-ttl=0
  args:
    creates: /etc/kubernetes/kubelet.conf
  register: kubeadm_init
  when: inventory_hostname in groups['kube_masters']

- name: Update proxy-mode for kube-proxy
  shell: >
    kubectl -n kube-system get ds -l k8s-app=kube-proxy -o json |
      jq '.items[0].spec.template.spec.containers[0].command |= .+ ["--proxy-mode=userspace"]' |
      kubectl apply -f - &&
    kubectl -n kube-system delete pods -l k8s-app=kube-proxy
  when:
    - inventory_hostname in groups['kube_masters']
    - kubeadm_init is changed
    - use_userspace_proxy

- name: Install pod network
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
  when: inventory_hostname in groups['kube_masters']

- name: Ensure kube-dns has started
  shell: kubectl -n kube-system rollout status deployment kube-dns
  when: inventory_hostname in groups['kube_masters']

# If the host is in masters and nodes, allow scheduling of work on it
- name: Allow scheduling of work on master
  command: kubectl taint nodes --all node-role.kubernetes.io/master-
  when:
    - inventory_hostname in groups['kube_masters']
    - inventory_hostname in groups['kube_nodes']
  register: result
  changed_when: result.rc == 0
  failed_when: result.rc != 0 and 'not found' not in result.stderr

- name: Get kubeadm token
  shell: kubeadm token list | tail -n +2 | awk '{ print $1 };'
  register: kubeadm_token
  when: inventory_hostname in groups['kube_masters']

- name: Set kubeadm_token fact (masters)
  set_fact:
    kubeadm_token: "{{ kubeadm_token.stdout }}"
  when: inventory_hostname in groups['kube_masters']

- name: Set kubeadm_token fact (nodes)
  set_fact:
    kubeadm_token: "{{ hostvars[groups['kube_masters'][0]].kubeadm_token }}"
  when:
    - inventory_hostname not in groups['kube_masters']
    - inventory_hostname in groups['kube_nodes']

- name: Join Kubernetes cluster
  command: kubeadm join --token={{ kubeadm_token }} --discovery-token-unsafe-skip-ca-verification {{ kube_master_ip }}:6443
  args:
    creates: /etc/kubernetes/kubelet.conf
  when:
    - inventory_hostname not in groups['kube_masters']
    - inventory_hostname in groups['kube_nodes']
