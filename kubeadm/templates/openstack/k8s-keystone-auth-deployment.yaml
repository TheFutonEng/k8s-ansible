# Even if not using a configmap for dynamic policy, k8s-keystone-auth
# still needs to be able to read configmaps to function correctly
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-keystone-auth
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-keystone-auth-read-configmaps
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-keystone-auth-read-configmaps
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: k8s-keystone-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-keystone-auth-read-configmaps
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-keystone-auth
  namespace: kube-system
  labels:
    app: k8s-keystone-auth
spec:
  selector:
    app: k8s-keystone-auth
  ports:
    - protocol: TCP
      port: 8443
      targetPort: 8443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-keystone-auth
  namespace: kube-system
  labels:
    app: k8s-keystone-auth
spec:
  replicas: 2
  selector:
    matchLabels:
      app: k8s-keystone-auth
  template:
    metadata:
      labels:
        app: k8s-keystone-auth
    spec:
      serviceAccountName: k8s-keystone-auth
      containers:
        - name: k8s-keystone-auth
          image: k8scloudprovider/k8s-keystone-auth:latest
          args:
            - ./bin/k8s-keystone-auth
            - --tls-cert-file
            - /etc/kubernetes/pki/tls.crt
            - --tls-private-key-file
            - /etc/kubernetes/pki/tls.key
            - --keystone-url
            - "{{ openstack_auth_url }}"
          volumeMounts:
            - mountPath: /etc/kubernetes/pki
              name: tls
              readOnly: true
          ports:
            - containerPort: 8443
      volumes:
      - name: tls
        secret:
          secretName: k8s-keystone-auth-tls
