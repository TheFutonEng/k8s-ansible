---

# If the playbook is running in "clustered" mode, we can ask the master
# for its IP and the kubeadm token
#
# If the playbook is running in "per-host" mode, they need to be given
# as variables

- name: Fetch kubeadm token from master
  shell: >
    set -o pipefail ;
    kubeadm token list | head -n 2 | tail -n 1 | awk '{ print $1 };'
  register: kubeadm_token_cmd
  delegate_to: "{{ groups['kube_masters'][0] }}"
  when:
    - kubeadm_token is not defined
    - "'kube_masters' in groups"

- name: Set kubeadm_token fact
  set_fact:
    kubeadm_token: "{{ kubeadm_token_cmd.stdout }}"
  when:
    - kubeadm_token is not defined
    - "'kube_masters' in groups"

- name: Set kube_master_ip fact
  set_fact:
    kube_master_ip: "{{ hostvars[groups['kube_masters'][0]]['ansible_' + cluster_interface].ipv4.address }}"
  when:
    - kube_master_ip is not defined
    - "'kube_masters' in groups"

- name: Join Kubernetes cluster
  command: >
    kubeadm join
      --token={{ kubeadm_token }}
      --ignore-preflight-errors=cri
      --node-name={{ host_ip }}
      --discovery-token-unsafe-skip-ca-verification
      {{ kube_master_ip }}:6443

- name: Ensure /root/.kube exists
  file:
    state: directory
    path: /root/.kube

- name: Symlink kubectl kubelet config to default location
  file:
    state: link
    path: /root/.kube/config
    src: /etc/kubernetes/kubelet.conf

- name: Wait for node to become ready
  shell: kubectl wait --for condition=ready --timeout -1s node {{ host_ip }}
