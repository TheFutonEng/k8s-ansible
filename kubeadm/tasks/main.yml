---

# We only support single-master clusters
- fail:
    msg: "Exactly one master is required"
  run_once: true
  when: "groups['kube-masters']|length != 1"

# There should be no crossover between the masters and the workers
- fail:
    msg: "Masters cannot also be workers"
  when:
    - inventory_hostname in groups['kube-masters']
    - inventory_hostname in groups['kube-workers']

# Include cloud provider variables
- name: Include cloud-provider variables
  include_vars: "{{ cloud_provider }}.yml"
  when: cloud_provider is defined

# Get the Kubernetes version information
- name: Detect Kubernetes version
  include_tasks: version.yml

# Upgrade existing nodes first
# We use a trick so that only one host is upgraded at once
- name: Upgrade existing nodes
  include_tasks: upgrade.yml
  when:
    - inventory_hostname == host_item
    - kubernetes_version_installed is defined
    - >
      kubernetes_version_installed != kubernetes_version_target or
      (upgrade_system_packages | bool)
  # Make sure the masters are upgraded first
  with_items: "{{ groups['kube-masters']|list }} + {{ groups['kube-workers']|list }}"
  loop_control:
    loop_var: host_item

# Then install any new nodes
# This can be done in parallel
- name: Install new nodes
  include_tasks: install.yml
  when: kubernetes_version_installed is not defined

# The final step is to remove any nodes that are no longer in the inventory
- name: Remove non-existent nodes
  include_tasks: remove.yml
  when: kube_role == "master"
