---

- name: Install pip
  yum:
    name: python-pip
    state: latest

- name: Install yq (jq for YAML)
  pip:
    name: yq
    state: latest

- name: Create cloud config file
  copy:
    content: |
      [Global]
      auth-url={{ openstack_auth_url }}
      domain-name=jasmin
      tenant-id={{ openstack_tenant_id }}
      username={{ openstack_username }}
      password={{ openstack_password }}
    dest: /etc/kubernetes/cloud.conf

- name: Configure control plane components for Openstack
  shell: |
    set -euxo pipefail
    # If the configuration has already been done, bail with a zero exit code
    grep '/etc/kubernetes/cloud.conf' /etc/kubernetes/manifests/{{ item }}.yaml && exit
    cat /etc/kubernetes/manifests/{{ item }}.yaml | \
      yq -y '.spec.containers[0].command |= .+ ["--cloud-provider=openstack", "--cloud-config=/etc/kubernetes/cloud.conf"]' | \
      yq -y '.spec.containers[0].volumeMounts |= .+ [{"mountPath": "/etc/kubernetes/cloud.conf", "name": "cloud-config", "readOnly": true}]' | \
      yq -y '.spec.volumes |= .+ [{"name": "cloud-config", "hostPath": {"path": "/etc/kubernetes/cloud.conf", "type": "FileOrCreate"}}]' \
      > /etc/kubernetes/manifests/{{ item }}.yaml.next
    mv /etc/kubernetes/manifests/{{ item }}.yaml.next /etc/kubernetes/manifests/{{ item }}.yaml
  with_items:
    - kube-controller-manager
    - kube-apiserver
  when: kube_role == "master"

- name: Wait for control plane components to restart with Openstack config
  shell: |
    set -euxo pipefail
    kubectl -n kube-system describe pod {{ item }} | grep '/etc/kubernetes/cloud.conf'
  with_items:
    - kube-controller-manager
    - kube-apiserver
  register: control_plane_openstack
  until: control_plane_openstack is succeeded
  retries: 60
  delay: 5

- name: Configure kubelet for Openstack
  lineinfile:
    path: /etc/sysconfig/kubelet
    line: KUBELET_EXTRA_ARGS="$KUBELET_EXTRA_ARGS --cloud-provider=openstack --cloud-config=/etc/kubernetes/cloud.conf"
    state: present

- name: Reload systemctl daemon
  systemd:
    daemon_reload: yes

- name: Restart kubelet
  service:
    name: kubelet
    state: restarted

- name: Ensure manifests directory exists
  file:
    path: /root/manifests/storage_cinder
    state: directory
  when: kube_role == "master"

- name: Install cinder manifests
  template:
    src: templates/storageclass.yaml
    dest: /root/manifests/storage_cinder/storageclass.yaml
  when: kube_role == "master"

- name: Register cinder storage class
  command: kubectl apply -f /root/manifests/storage_cinder/storageclass.yaml
  when: kube_role == "master"
