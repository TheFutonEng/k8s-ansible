---

# Set the token TTL so that the token doesn't expire
# Use the IP address as the node name
- name: Initialise Kubernetes master
  command: >
    kubeadm init
      --kubernetes-version={{ kubernetes_version_target }}
      --token-ttl=0
      --apiserver-advertise-address={{ host_ip }}
      --node-name={{ host_ip }}
      --ignore-preflight-errors=cri

- name: Ensure /root/.kube exists
  file:
    state: directory
    path: /root/.kube

- name: Copy kubectl admin config to default location
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config

- name: Update proxy-mode for kube-proxy
  shell: >
    set -o pipefail &&
    kubectl -n kube-system get ds -l k8s-app=kube-proxy -o json |
      jq '.items[0].spec.template.spec.containers[0].command |= .+ ["--proxy-mode=userspace"]' |
      kubectl apply -f - &&
    kubectl -n kube-system delete pods -l k8s-app=kube-proxy
  when: userspace_proxy

- name: Install pod network
  shell: >
    set -o pipefail &&
    kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

- name: Wait for node to become ready
  command: kubectl wait --for condition=ready --timeout -1s node {{ host_ip }}

- name: Ensure DNS service has started
  command: kubectl -n kube-system rollout status deployment coredns

- name: Wait for control plane components to become ready
  shell: |
    set -eo pipefail
    # Wait until there is at least one pod with the correct label
    until kubectl -n kube-system get pod -l tier=control-plane,component={{ item }} -o json | jq -e '.items|length > 0'
    do
      sleep 1
    done
    # Then wait for them to go into the ready state
    kubectl -n kube-system wait --for condition=ready pod -l tier=control-plane,component={{ item }} --timeout -1s
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
