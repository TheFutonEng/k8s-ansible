---

- name: Run cloud provider pre-upgrade tasks
  include_tasks: "{{ cloud_provider_pre_upgrade_tasks }}"
  when: cloud_provider_pre_upgrade_tasks is defined

- name: Upgrade kubeadm and kubectl
  yum:
    name:
      - kubeadm-{{ kubernetes_version_target }}
      - kubectl-{{ kubernetes_version_target }}
    state: latest
  register: kubeadm_kubectl_upgraded

# If kubectl was upgraded, upgrade the control plane
- name: Upgrade control plane
  block:
    - name: Upgrade control plane to desired version
      command: kubeadm upgrade apply -y v{{ kubernetes_version_target }}

    - name: Upgrade pod network
      shell: |
        set -eo pipefail
        kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
  when:
    - kube_role == "master"
    - kubeadm_kubectl_upgraded is changed

# Try our best to drain pods from the host - if the drain times out, continue anyway
- name: Drain pods from host
  command: kubectl drain {{ ansible_hostname }} --ignore-daemonsets --timeout={{ kubectl_drain_timeout }}
  delegate_to: "{{ kube_master_inventory_hostname }}"
  register: kubectl_drain
  failed_when: kubectl_drain.rc != 0 and 'did not complete within' not in kubectl_drain.stderr

- include_tasks: prerequisites.yml

## NOTE: docker will be upgraded as part of the general package upgrade if an update is available

- name: Upgrade kubelet
  yum:
    name: kubelet-{{ kubernetes_version_target }}
    state: latest
  register: kubelet_upgraded

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  when: kubelet_upgraded is changed

- name: Upgrade kubelet config
  command: kubeadm upgrade node config --kubelet-version v{{ kubernetes_version_target }}
  when:
    - kube_role == "worker"
    - kubelet_upgraded is changed

- name: Restart docker and kubelet
  service:
    name: "{{ item }}"
    state: restarted
  with_items:
    - docker
    - kubelet
  when: kubelet_upgraded is changed

- name: Wait for reported kubelet version from API server to match target version
  command: kubectl --request-timeout=1s get nodes {{ ansible_hostname }} -o jsonpath='{.status.nodeInfo.kubeletVersion}'
  delegate_to: "{{ kube_master_inventory_hostname }}"
  register: api_server_kubelet_version
  until: "api_server_kubelet_version is succeeded and api_server_kubelet_version.stdout[1:] == kubernetes_version_target"
  retries: 60
  delay: 5

- name: Uncordon host
  command: kubectl uncordon {{ ansible_hostname }}
  delegate_to: "{{ kube_master_inventory_hostname }}"

- name: Run cloud provider post-upgrade tasks
  include_tasks: "{{ cloud_provider_post_upgrade_tasks }}"
  when: cloud_provider_post_upgrade_tasks is defined

- name: Set installed Kubernetes version fact
  set_fact:
    kubernetes_version_installed: "{{ kubernetes_version_target }}"
