---

- name: Ensure firewalld is started
  service:
    name: firewalld
    state: started
    enabled: yes

- name: Install firewalld services
  copy:
    src: files/firewalld/{{ item }}
    dest: /etc/firewalld/services/{{ item }}
  with_items:
    - kubernetes-api-server.xml
    - kubernetes-master.xml
    - kubernetes-worker.xml
    - weave-net.xml
  register: firewalld_services

- name: Reload firewalld
  command: firewall-cmd --reload
  when: firewalld_services is changed

- name: Allow Kubernetes ports for cluster CIDR
  firewalld:
    rich_rule: 'rule family="ipv4" source address="{{ cluster_cidr }}" service name="{{ item }}" accept'
    permanent: true
    immediate: true
    state: enabled
  with_items:
    - weave-net
    - "kubernetes-{{ kube_role }}"

- name: Allow external access to API server
  firewalld:
    service: kubernetes-api-server
    permanent: true
    immediate: true
    state: enabled
  when: kube_role == "master"

- name: Create sysctl settings file for bridge settings
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
  register: sysctl_k8s

- name: Load new sysctl settings
  command: sysctl --system
  when: sysctl_k8s is changed

- name: Ensure SELinux is disabled
  selinux:
    state: disabled

- name: Remove swap volumes from /etc/fstab
  lineinfile:
    path: /etc/fstab
    state: absent
    # This should match all lines with an fstype of "swap"
    regexp: '^[^\s]+\s+[^\s]+\s+swap\s+'
  register: remove_swap_volumes

- name: Disable swap
  command: swapoff --all
  when: remove_swap_volumes is changed

- name: Add yum repository for Kubernetes
  yum_repository:
    name: kubernetes
    description: Kubernetes repo
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    gpgcheck: yes
    repo_gpgcheck: yes
    gpgkey: >
      https://packages.cloud.google.com/yum/doc/yum-key.gpg
      https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: Refresh yum package index
  command: yum makecache -y
  args:
    warn: no

- name: Install yum versionlock plugin
  yum:
    name: yum-plugin-versionlock
    state: latest

- name: Enable EPEL
  yum:
    name: epel-release
    state: latest

- name: Install jq
  yum:
    name: jq
    state: latest

- name: Remove locks on Docker and Kubernetes versions
  command: yum versionlock delete docker kubelet kubeadm kubectl
  args:
    warn: no
  register: versionlock_rm
  failed_when: versionlock_rm.rc != 0 and 'no matches' not in versionlock_rm.stderr

# Tell the user which Kubernetes version we think they specified
- debug:
    msg: "Requested Kubernetes version: {{ kubernetes_version }}"

# Get the currently installed version
- name: Find installed Kubernetes version
  shell: |
    set -euxo pipefail
    yum list installed kubelet -q | tail -n -1 | tr -s " " | cut -d " " -f 2 | cut -d "-" -f 1
  changed_when: false
  failed_when: false
  register: kubelet_installed

- name: Set installed Kubernetes version fact
  set_fact:
    kubernetes_version_installed: "{{ kubelet_installed.stdout }}"
  when: kubelet_installed.rc == 0

- debug:
    msg: "Installed Kubernetes version: {{ kubernetes_version_installed|default('none') }}"

# Find the latest available Kubernetes version that conforms to the requested version
- name: Find latest matching Kubernetes version
  shell: |
    set -euxo pipefail
    yum list available kubelet-{{ kubernetes_version }}* --showduplicates -q | \
      tail -n -1 | tr -s " " | cut -d " " -f 2 | cut -d "-" -f 1
  changed_when: false
  register: kubelet_available

- name: Set target Kubernetes version fact
  set_fact:
    kubernetes_version_target: "{{ kubelet_available.stdout }}"

- debug:
    msg: "Target Kubernetes version: {{ kubernetes_version_target }}"

- name: Install Kubernetes
  include_tasks: "install.yml"
  when: kubernetes_version_installed is not defined

- name: Upgrade Kubernetes
  include_tasks: "upgrade.yml"
  when: kubernetes_version_installed != kubernetes_version_target

- name: Lock Docker and Kubernetes versions
  command: yum versionlock docker kubelet kubeadm kubectl
  args:
    warn: no
